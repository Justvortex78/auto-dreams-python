# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLabel, QPushButton, QLineEdit, QTextEdit, QStackedWidget, 
                             QScrollArea, QGridLayout, QMessageBox, QTableWidget, QTableWidgetItem,
                             QHeaderView, QFormLayout, QSpinBox, QFrame, QDialog, QScrollBar, QSizePolicy)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QColor, QFont

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ get_conn –¥–ª—è realtime stats
from auth_db import init_db, create_user, find_user_by_login_or_email, verify_password, get_conn
from car_db import (get_available_cars, get_all_cars, get_client_orders, add_review, 
                   get_client_reviews, create_order, get_or_create_client_for_user, 
                   get_available_employee, add_car, update_car, delete_car, get_car_by_id, init_car_db)

COLORS = {
    'primary_bg': '#0f172a',
    'secondary_bg': '#1e293b',
    'accent_green': '#10b981',
    'accent_teal': '#0d9488',
    'text_primary': '#f1f5f9',
    'text_secondary': '#94a3b8',
    'border': '#334155',
    'success': '#22c55e',
    'danger': '#ef4444'
}

class Line(QFrame):
    def __init__(self):
        super().__init__()
        self.setFrameShape(QFrame.HLine)
        self.setFrameShadow(QFrame.Sunken)
        self.setStyleSheet(f"background-color: {COLORS['accent_green']}; margin: 10px 0;")

class LoginPage(QWidget):
    def __init__(self, on_login_success, go_register):
        super().__init__()
        self.on_login_success = on_login_success
        self.go_register = go_register
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(40, 40, 40, 40)
        
        title = QLabel("AUTO DREAMS")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet(f"""
            font-size: 48px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 10px;
            font-family: 'Segoe UI';
        """)
        
        subtitle = QLabel("–ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–ò")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet(f"""
            font-size: 20px;
            color: {COLORS['accent_teal']};
            margin-bottom: 40px;
            font-family: 'Segoe UI';
        """)
        
        form_container = QWidget()
        form_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 15px;
            padding: 40px;
        """)
        form_layout = QVBoxLayout(form_container)
        
        form_title = QLabel("–í–•–û–î –í –°–ò–°–¢–ï–ú–£")
        form_title.setAlignment(Qt.AlignCenter)
        form_title.setStyleSheet(f"""
            font-size: 24px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("–õ–æ–≥–∏–Ω –∏–ª–∏ Email")
        self.username_input.setStyleSheet(f"""
            QLineEdit {{
                background-color: {COLORS['primary_bg']};
                color: {COLORS['text_primary']};
                padding: 15px;
                border: 1px solid {COLORS['border']};
                border-radius: 8px;
                font-size: 16px;
                font-family: 'Segoe UI';
            }}
            QLineEdit:focus {{
                border-color: {COLORS['accent_green']};
            }}
        """)
        
        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setStyleSheet(f"""
            QLineEdit {{
                background-color: {COLORS['primary_bg']};
                color: {COLORS['text_primary']};
                padding: 15px;
                border: 1px solid {COLORS['border']};
                border-radius: 8px;
                font-size: 16px;
                font-family: 'Segoe UI';
            }}
            QLineEdit:focus {{
                border-color: {COLORS['accent_green']};
            }}
        """)
        
        btn_login = QPushButton("üöÄ –í–û–ô–¢–ò")
        btn_login.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 15px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_login.clicked.connect(self.login)
        
        btn_register = QPushButton("üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
        btn_register.setStyleSheet(f"""
            QPushButton {{
                background-color: transparent;
                color: {COLORS['accent_green']};
                border: 2px solid {COLORS['accent_green']};
                padding: 15px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 10px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
        """)
        btn_register.clicked.connect(self.go_register)
        
        info_label = QLabel("üîë –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n–ê–¥–º–∏–Ω: admin/admin\n–ö–ª–∏–µ–Ω—Ç—ã: client1/123, client2/123")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setStyleSheet(f"""
            color: {COLORS['text_secondary']};
            font-size: 14px;
            margin-top: 20px;
            font-family: 'Segoe UI';
            background-color: {COLORS['primary_bg']};
            padding: 15px;
            border-radius: 8px;
            border: 1px solid {COLORS['border']};
        """)
        
        form_layout.addWidget(form_title)
        form_layout.addWidget(self.username_input)
        form_layout.addWidget(self.password_input)
        form_layout.addWidget(btn_login)
        form_layout.addWidget(btn_register)
        form_layout.addWidget(info_label)
        
        layout.addStretch()
        layout.addWidget(title)
        layout.addWidget(subtitle)
        layout.addWidget(form_container)
        layout.addStretch()

    def login(self):
        username = self.username_input.text().strip()
        password = self.password_input.text().strip()
    
        if not username or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")
    
        try:
            user = find_user_by_login_or_email(username)
        
            if user and verify_password(password, user['password_hash']):
                print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {user['username']} (—Ä–æ–ª—å: {user['role']})")
                self.on_login_success(user)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}")

class RegisterPage(QWidget):
    def __init__(self, go_login):
        super().__init__()
        self.go_login = go_login
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(40, 40, 40, 40)
        
        title = QLabel("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet(f"""
            font-size: 36px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        form_container = QWidget()
        form_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 15px;
            padding: 40px;
            max-width: 500px;
            margin: 0 auto;
        """)
        form_layout = QFormLayout(form_container)
        form_layout.setSpacing(20)
        
        self.first_name_input = QLineEdit()
        self.first_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
        self.last_name_input = QLineEdit()
        self.last_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω")
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.confirm_password_input = QLineEdit()
        self.confirm_password_input.setPlaceholderText("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        self.confirm_password_input.setEchoMode(QLineEdit.Password)
        
        input_style = f"""
            QLineEdit {{
                background-color: {COLORS['primary_bg']};
                color: {COLORS['text_primary']};
                padding: 12px;
                border: 1px solid {COLORS['border']};
                border-radius: 8px;
                font-size: 14px;
                font-family: 'Segoe UI';
                min-width: 300px;
            }}
            QLineEdit:focus {{
                border-color: {COLORS['accent_green']};
            }}
        """
        
        for input_field in [self.first_name_input, self.last_name_input, self.username_input, 
                           self.email_input, self.password_input, self.confirm_password_input]:
            input_field.setStyleSheet(input_style)
        
        form_layout.addRow("–ò–º—è:", self.first_name_input)
        form_layout.addRow("–§–∞–º–∏–ª–∏—è:", self.last_name_input)
        form_layout.addRow("–õ–æ–≥–∏–Ω:", self.username_input)
        form_layout.addRow("Email:", self.email_input)
        form_layout.addRow("–ü–∞—Ä–æ–ª—å:", self.password_input)
        form_layout.addRow("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:", self.confirm_password_input)
        
        for i in range(form_layout.rowCount()):
            label = form_layout.itemAt(i, QFormLayout.LabelRole).widget()
            if label:
                label.setStyleSheet(f"color: {COLORS['accent_green']}; font-size: 14px; font-weight: bold; font-family: 'Segoe UI';")
        
        btn_register = QPushButton("‚úÖ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø")
        btn_register.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 15px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_register.clicked.connect(self.register)
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –ö –í–•–û–î–£")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background-color: transparent;
                color: {COLORS['accent_green']};
                border: 2px solid {COLORS['accent_green']};
                padding: 12px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 10px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
        """)
        btn_back.clicked.connect(self.go_login)
        
        layout.addWidget(title)
        layout.addWidget(form_container)
        layout.addWidget(btn_register)
        layout.addWidget(btn_back)
        layout.addStretch()

    def register(self):
        first_name = self.first_name_input.text().strip()
        last_name = self.last_name_input.text().strip()
        username = self.username_input.text().strip()
        email = self.email_input.text().strip()
        password = self.password_input.text().strip()
        confirm_password = self.confirm_password_input.text().strip()
        
        if not all([first_name, last_name, username, email, password, confirm_password]):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        if password != confirm_password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        try:
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í - 5 –ê–†–ì–£–ú–ï–ù–¢–û–í
            create_user(username, email, password, first_name, last_name)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
            self.go_login()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

class CarCard(QWidget):
    def __init__(self, car, user, on_buy_callback):
        super().__init__()
        self.car = car
        self.user = user
        self.on_buy_callback = on_buy_callback
        self.setup_ui()

    def setup_ui(self):
        self.setFixedSize(320, 420)
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {COLORS['secondary_bg']};
                border: 1px solid {COLORS['border']};
                border-radius: 12px;
                margin: 8px;
            }}
            QWidget:hover {{
                border-color: {COLORS['accent_green']};
                background-color: #1e2130;
            }}
        """)

        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        image_label = QLabel()
        image_label.setFixedSize(296, 160)
        image_label.setAlignment(Qt.AlignCenter)
        image_label.setStyleSheet(f"""
            QLabel {{
                background-color: {COLORS['primary_bg']};
                border: 1px solid {COLORS['border']};
                border-radius: 8px;
                color: {COLORS['text_primary']};
            }}
        """)
        
        pixmap = self.load_car_image()
        if pixmap and not pixmap.isNull():
            pixmap = pixmap.scaled(290, 155, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            image_label.setPixmap(pixmap)
        else:
            image_label.setText(f"üöó\n{self.car['brand']}\n{self.car['model']}")
            image_label.setStyleSheet(f"""
                QLabel {{
                    background-color: {COLORS['primary_bg']};
                    border: 1px solid {COLORS['border']};
                    border-radius: 8px;
                    color: {COLORS['accent_green']};
                    font-size: 14px;
                    font-weight: bold;
                    font-family: 'Segoe UI';
                }}
            """)

        title_label = QLabel(f"{self.car['brand']} {self.car['model']}")
        title_label.setStyleSheet(f"""
            color: {COLORS['text_primary']}; 
            font-size: 16px; 
            font-weight: bold;
            margin-top: 5px;
            font-family: 'Segoe UI';
        """)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setWordWrap(True)

        vin_label = QLabel(f"VIN: {self.car['vin'][:8]}...")
        vin_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 10px; font-family: 'Segoe UI';")
        vin_label.setAlignment(Qt.AlignCenter)

        price_label = QLabel(f"{self.car['price']:,.0f} ‚ÇΩ")
        price_label.setStyleSheet(f"""
            color: {COLORS['accent_green']}; 
            font-size: 18px; 
            font-weight: bold;
            margin: 5px 0;
            font-family: 'Segoe UI';
            background-color: {COLORS['primary_bg']};
            border-radius: 6px;
            padding: 6px;
            border: 1px solid {COLORS['border']};
        """)
        price_label.setAlignment(Qt.AlignCenter)

        status_label = QLabel(f"–°—Ç–∞—Ç—É—Å: {self.car['status']}")
        status_color = COLORS['success'] if self.car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏' else COLORS['danger']
        status_label.setStyleSheet(f"color: {status_color}; font-size: 12px; font-weight: bold; font-family: 'Segoe UI';")
        status_label.setAlignment(Qt.AlignCenter)

        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(8)
        
        btn_details = QPushButton("üîç")
        btn_details.setToolTip("–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
        btn_details.setFixedSize(40, 35)
        btn_details.setStyleSheet(f"""
            QPushButton {{
                background-color: transparent;
                color: {COLORS['accent_green']};
                border: 1px solid {COLORS['accent_green']};
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
        """)
        btn_details.clicked.connect(self.show_details)

        btn_buy = QPushButton("–ö–£–ü–ò–¢–¨" if self.car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏' else "–ü–†–û–î–ê–ù–û")
        btn_buy.setEnabled(self.car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏')
        btn_buy.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
            QPushButton:disabled {{
                background-color: {COLORS['border']};
                color: {COLORS['text_secondary']};
            }}
        """)
        if self.car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏':
            btn_buy.clicked.connect(self.buy_car)

        buttons_layout.addWidget(btn_details)
        buttons_layout.addWidget(btn_buy)

        layout.addWidget(image_label)
        layout.addWidget(title_label)
        layout.addWidget(vin_label)
        layout.addWidget(price_label)
        layout.addWidget(status_label)
        layout.addLayout(buttons_layout)

    def load_car_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        try:
            images_path = os.path.join(os.path.dirname(__file__), "images")
            
            if not os.path.exists(images_path):
                os.makedirs(images_path)
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            possible_filenames = [
                f"{self.car['brand'].lower()}_{self.car['model'].lower()}.jpg",
                f"{self.car['brand'].lower()}_{self.car['model'].lower()}.png",
                f"{self.car['brand'].lower()}_{self.car['model'].lower()}.jpeg",
                f"{self.car['id']}.jpg",
                f"{self.car['id']}.png",
                "default_car.jpg"
            ]
            
            for filename in possible_filenames:
                image_path = os.path.join(images_path, filename)
                if os.path.exists(image_path):
                    return QPixmap(image_path)
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def show_details(self):
        msg = QMessageBox()
        msg.setWindowTitle(f"üöó {self.car['brand']} {self.car['model']}")
        msg.setText(f"""
<b style='color: {COLORS['accent_green']};'>–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>

<b>–ú–∞—Ä–∫–∞:</b> {self.car['brand']}
<b>–ú–æ–¥–µ–ª—å:</b> {self.car['model']}
<b>–ì–æ–¥:</b> {self.car.get('year', '2024')}
<b>–¶–≤–µ—Ç:</b> {self.car.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω')}
<b>VIN:</b> {self.car['vin']}
<b>–ü—Ä–æ–±–µ–≥:</b> {self.car.get('mileage', 0):,} –∫–º
<b>–¶–µ–Ω–∞:</b> {self.car['price']:,.0f} ‚ÇΩ
<b>–°—Ç–∞—Ç—É—Å:</b> {self.car['status']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{self.get_car_description()}
        """)
        msg.setStyleSheet(f"""
            QMessageBox {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                font-family: 'Segoe UI';
            }}
            QMessageBox QLabel {{
                color: {COLORS['text_primary']};
                font-size: 14px;
            }}
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-family: 'Segoe UI';
                min-width: 80px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        msg.exec()

    def get_car_description(self):
        descriptions = {
            'Toyota Camry': '–°—Ç–∏–ª—å–Ω—ã–π —Å–µ–¥–∞–Ω ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥',
            'Toyota Corolla': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ–¥–∞–Ω ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'Honda Civic': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–µ–¥–∞–Ω ‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'BMW X5': '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ ‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ ‚Ä¢ –†–æ—Å–∫–æ—à—å ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'BMW 3 Series': '–ë–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω ‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ',
            'Mercedes E-Class': '–ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç ‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ',
            'Audi A4': '–ü—Ä–µ–º–∏—É–º —Å–µ–¥–∞–Ω ‚Ä¢ –°—Ç–∏–ª—å ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ',
            'Ford Focus': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ö—ç—Ç—á–±–µ–∫ ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
            'Hyundai Tucson': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è ‚Ä¢ –û—Å–Ω–∞—â–µ–Ω–∏–µ ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å',
            'Kia Sportage': '–°—Ç–∏–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä ‚Ä¢ –¶–µ–Ω–∞/–ö–∞—á–µ—Å—Ç–≤–æ ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç'
        }
        
        key = f"{self.car['brand']} {self.car['model']}"
        return descriptions.get(key, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å ‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

    def buy_car(self):
        if self.car['status'] != '–≤ –Ω–∞–ª–∏—á–∏–∏':
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –ø—Ä–æ–¥–∞–Ω.")
            return
        reply = QMessageBox()
        reply.setWindowTitle("üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–ö–£–ü–ö–ò")
        reply.setText(f"""
<b style='color: {COLORS['accent_green']};'>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ü–û–ö–£–ü–ö–£:</b>

{self.car['brand']} {self.car['model']}

<b>–¶–ï–ù–ê: {self.car['price']:,.0f} ‚ÇΩ</b>

‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è 3 –≥–æ–¥–∞
‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞  
‚úÖ –ü–µ—Ä–≤–æ–µ –¢–û –≤ –ø–æ–¥–∞—Ä–æ–∫
‚úÖ –ö–æ–≤—Ä–∏–∫–∏ –≤ —Å–∞–ª–æ–Ω
        """)
        reply.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        reply.setDefaultButton(QMessageBox.No)
        reply.setStyleSheet(f"""
            QMessageBox {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                font-family: 'Segoe UI';
            }}
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-family: 'Segoe UI';
                min-width: 80px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        
        result = reply.exec()
        
        if result == QMessageBox.Yes:
            try:
                client_id = get_or_create_client_for_user(self.user['id'], self.user['username'])
                employee_id = get_available_employee()
                
                create_order(client_id, self.car['id'], employee_id, self.car['price'])
                
                success_msg = QMessageBox()
                success_msg.setWindowTitle("üéâ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø!")
                success_msg.setText(f"""
<b style='color: {COLORS['accent_green']};'>–ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–û –û–§–û–†–ú–õ–ï–ù–ê!</b>

{self.car['brand']} {self.car['model']}

<b>–¶–ï–ù–ê: {self.car['price']:,.0f} ‚ÇΩ</b>

üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
üéÅ –ë–æ–Ω—É—Å—ã: –ü–µ—Ä–≤–æ–µ –¢–û + –∫–æ–≤—Ä–∏–∫–∏

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üöó‚ú®
                """)
                success_msg.setStyleSheet(f"""
                    QMessageBox {{
                        background-color: {COLORS['secondary_bg']};
                        color: {COLORS['text_primary']};
                        border: 2px solid {COLORS['accent_green']};
                        border-radius: 12px;
                        font-family: 'Segoe UI';
                    }}
                    QPushButton {{
                        background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                            stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                        color: {COLORS['text_primary']};
                        border: none;
                        padding: 8px 16px;
                        border-radius: 6px;
                        font-weight: bold;
                        font-family: 'Segoe UI';
                    }}
                """)
                success_msg.exec()
                
                self.on_buy_callback()
                
            except Exception as e:
                QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É: {str(e)}")

class OrderCard(QWidget):
    def __init__(self, order):
        super().__init__()
        self.order = order
        self.setup_ui()

    def setup_ui(self):
        self.setFixedSize(320, 420)
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {COLORS['secondary_bg']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                margin: 8px;
            }}
        """)

        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        image_label = QLabel()
        image_label.setFixedSize(296, 160)
        image_label.setAlignment(Qt.AlignCenter)
        image_label.setStyleSheet(f"""
            QLabel {{
                background-color: {COLORS['primary_bg']};
                border: 1px solid {COLORS['border']};
                border-radius: 8px;
                color: {COLORS['text_primary']};
            }}
        """)
        
        pixmap = self.load_car_image()
        if pixmap and not pixmap.isNull():
            pixmap = pixmap.scaled(290, 155, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            image_label.setPixmap(pixmap)
        else:
            image_label.setText(f"üöó\n{self.order['brand']}\n{self.order['model']}")
            image_label.setStyleSheet(f"""
                QLabel {{
                    background-color: {COLORS['primary_bg']};
                    border: 1px solid {COLORS['border']};
                    border-radius: 8px;
                    color: {COLORS['accent_green']};
                    font-size: 14px;
                    font-weight: bold;
                    font-family: 'Segoe UI';
                }}
            """)

        title_label = QLabel(f"{self.order['brand']} {self.order['model']}")
        title_label.setStyleSheet(f"""
            color: {COLORS['text_primary']}; 
            font-size: 16px; 
            font-weight: bold;
            margin-top: 5px;
            font-family: 'Segoe UI';
        """)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setWordWrap(True)

        vin_label = QLabel(f"VIN: {self.order['vin']}")
        vin_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 10px; font-family: 'Segoe UI';")
        vin_label.setAlignment(Qt.AlignCenter)

        price_label = QLabel(f"{self.order['final_price']:,.0f} ‚ÇΩ")
        price_label.setStyleSheet(f"""
            color: {COLORS['accent_green']}; 
            font-size: 18px; 
            font-weight: bold;
            margin: 5px 0;
            font-family: 'Segoe UI';
            background-color: {COLORS['primary_bg']};
            border-radius: 6px;
            padding: 6px;
            border: 1px solid {COLORS['border']};
        """)
        price_label.setAlignment(Qt.AlignCenter)

        date_label = QLabel(f"–î–∞—Ç–∞: {self.order['sale_date']}")
        date_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 12px; font-family: 'Segoe UI';")
        date_label.setAlignment(Qt.AlignCenter)

        status_label = QLabel("‚úÖ –í–´–ü–û–õ–ù–ï–ù")
        status_label.setStyleSheet(f"color: {COLORS['success']}; font-size: 14px; font-weight: bold; font-family: 'Segoe UI';")
        status_label.setAlignment(Qt.AlignCenter)

        layout.addWidget(image_label)
        layout.addWidget(title_label)
        layout.addWidget(vin_label)
        layout.addWidget(price_label)
        layout.addWidget(date_label)
        layout.addWidget(status_label)

    def load_car_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        try:
            images_path = os.path.join(os.path.dirname(__file__), "images")
            
            if not os.path.exists(images_path):
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            possible_filenames = [
                f"{self.order['brand'].lower()}_{self.order['model'].lower()}.jpg",
                f"{self.order['brand'].lower()}_{self.order['model'].lower()}.png",
                f"{self.order['brand'].lower()}_{self.order['model'].lower()}.jpeg",
                "default_car.jpg"
            ]
            
            for filename in possible_filenames:
                image_path = os.path.join(images_path, filename)
                if os.path.exists(image_path):
                    return QPixmap(image_path)
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

class ClientMainMenuPage(QWidget):
    def __init__(self, user, logout_callback):
        super().__init__()
        self.user = user
        self.logout_callback = logout_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(40, 20, 40, 20)
        
        title = QLabel("AUTO DREAMS")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet(f"""
            font-size: 42px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 10px;
            font-family: 'Segoe UI';
        """)
        
        subtitle = QLabel("–ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–ò")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet(f"""
            font-size: 20px;
            color: {COLORS['accent_teal']};
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_text = f"–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {self.user['first_name']} {self.user['last_name']}!"
        welcome = QLabel(welcome_text)
        welcome.setAlignment(Qt.AlignCenter)
        welcome.setStyleSheet(f"""
            font-size: 18px;
            color: {COLORS['text_secondary']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        menu_container = QWidget()
        menu_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 15px;
            padding: 30px;
        """)
        menu_layout = QVBoxLayout(menu_container)
        menu_layout.setAlignment(Qt.AlignCenter)
        menu_layout.setSpacing(15)
        
        menu_label = QLabel("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        menu_label.setAlignment(Qt.AlignCenter)
        menu_label.setStyleSheet(f"""
            font-size: 28px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        btn_assortment = self.create_menu_button("üì¶ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢ –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
        btn_orders = self.create_menu_button("üìã –ú–û–ò –ó–ê–ö–ê–ó–´")
        btn_reviews = self.create_menu_button("‚≠ê –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í")
        btn_my_reviews = self.create_menu_button("üìù –ú–û–ò –û–¢–ó–´–í–´")
        btn_exit = self.create_menu_button("üö™ –í–´–•–û–î")
        
        btn_assortment.clicked.connect(self.show_assortment)
        btn_orders.clicked.connect(self.show_orders)
        btn_reviews.clicked.connect(self.show_reviews)
        btn_my_reviews.clicked.connect(self.show_my_reviews)
        btn_exit.clicked.connect(self.logout_callback)
        
        menu_layout.addWidget(btn_assortment)
        menu_layout.addWidget(btn_orders)
        menu_layout.addWidget(btn_reviews)
        menu_layout.addWidget(btn_my_reviews)
        menu_layout.addWidget(btn_exit)
        
        instruction_frame = QFrame()
        instruction_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {COLORS['secondary_bg']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                margin-top: 30px;
                padding: 20px;
            }}
        """)
        
        instruction_layout = QVBoxLayout(instruction_frame)
        
        instruction_title = QLabel("–ò–ù–°–¢–†–£–ö–¶–ò–Ø")
        instruction_title.setStyleSheet(f"""
            font-size: 16px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 10px;
            font-family: 'Segoe UI';
        """)
        
        instruction_text = QLabel(
            "‚Ä¢ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
            "‚Ä¢ –ú–û–ò –ó–ê–ö–ê–ó–´ - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫\n"  
            "‚Ä¢ –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í - –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ\n"
            "‚Ä¢ –ú–û–ò –û–¢–ó–´–í–´ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤\n"
            "‚Ä¢ –í–´–•–û–î - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–∫–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
        instruction_text.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 12px; line-height: 1.5; font-family: 'Segoe UI';")
        
        instruction_layout.addWidget(instruction_title)
        instruction_layout.addWidget(instruction_text)
        
        main_layout.addWidget(title)
        main_layout.addWidget(subtitle)
        main_layout.addWidget(welcome)
        main_layout.addWidget(Line())
        main_layout.addWidget(menu_label)
        main_layout.addWidget(menu_container, 1)
        main_layout.addWidget(instruction_frame)
        main_layout.addStretch()

    def create_menu_button(self, text):
        button = QPushButton(text)
        # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–µ–∑–∞–ª—Å—è
        button.setMinimumSize(420, 70)
        button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        button.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 25px;
                border-radius: 10px;
                font-size: 16px;
                font-weight: bold;
                margin: 5px 0;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
            QPushButton:pressed {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0d9468, stop:1 #0b766c);
            }}
        """)
        return button

    def show_assortment(self):
        self.parent().parent().show_car_catalog()
    
    def show_orders(self):
        self.parent().parent().show_orders_page()
    
    def show_reviews(self):
        self.parent().parent().show_reviews_page()
    
    def show_my_reviews(self):
        self.parent().parent().show_my_reviews_page()

class EmployeeMainMenuPage(QWidget):
    def __init__(self, user, logout_callback):
        super().__init__()
        self.user = user
        self.logout_callback = logout_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(40, 20, 40, 20)
        
        title = QLabel("AUTO DREAMS")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet(f"""
            font-size: 42px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 10px;
            font-family: 'Segoe UI';
        """)
        
        subtitle = QLabel("–ü–ê–ù–ï–õ–¨ –°–û–¢–†–£–î–ù–ò–ö–ê")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet(f"""
            font-size: 20px;
            color: {COLORS['accent_teal']};
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        welcome_text = f"–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {self.user['first_name']} {self.user['last_name']}!"
        welcome = QLabel(welcome_text)
        welcome.setAlignment(Qt.AlignCenter)
        welcome.setStyleSheet(f"""
            font-size: 18px;
            color: {COLORS['text_secondary']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        menu_container = QWidget()
        menu_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 15px;
            padding: 30px;
        """)
        menu_layout = QVBoxLayout(menu_container)
        menu_layout.setAlignment(Qt.AlignCenter)
        menu_layout.setSpacing(15)
        
        menu_label = QLabel("–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        menu_label.setAlignment(Qt.AlignCenter)
        menu_label.setStyleSheet(f"""
            font-size: 28px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 30px;
            font-family: 'Segoe UI';
        """)
        
        btn_manage_cars = self.create_menu_button("üöó –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò")
        btn_view_all_cars = self.create_menu_button("üìã –í–ï–°–¨ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢")
        btn_realtime_stats = self.create_menu_button("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        btn_exit = self.create_menu_button("üö™ –í–´–•–û–î")
        
        btn_manage_cars.clicked.connect(self.show_manage_cars)
        btn_view_all_cars.clicked.connect(self.show_all_cars)
        btn_realtime_stats.clicked.connect(self.show_realtime_stats)
        btn_exit.clicked.connect(self.logout_callback)
        
        menu_layout.addWidget(btn_manage_cars)
        menu_layout.addWidget(btn_view_all_cars)
        menu_layout.addWidget(btn_realtime_stats)
        menu_layout.addWidget(btn_exit)
        
        instruction_frame = QFrame()
        instruction_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {COLORS['secondary_bg']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                margin-top: 30px;
                padding: 20px;
            }}
        """)
        
        instruction_layout = QVBoxLayout(instruction_frame)
        
        instruction_title = QLabel("–ò–ù–°–¢–†–£–ö–¶–ò–Ø –°–û–¢–†–£–î–ù–ò–ö–ê")
        instruction_title.setStyleSheet(f"""
            font-size: 16px;
            font-weight: bold;
            color: {COLORS['accent_green']};
            margin-bottom: 10px;
            font-family: 'Segoe UI';
        """)
        
        instruction_text = QLabel(
            "‚Ä¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –í–ï–°–¨ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ)\n"  
            "‚Ä¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö\n"
            "‚Ä¢ –í–´–•–û–î - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–∫–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
        instruction_text.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 12px; line-height: 1.5; font-family: 'Segoe UI';")
        
        instruction_layout.addWidget(instruction_title)
        instruction_layout.addWidget(instruction_text)
        
        main_layout.addWidget(title)
        main_layout.addWidget(subtitle)
        main_layout.addWidget(welcome)
        main_layout.addWidget(Line())
        main_layout.addWidget(menu_label)
        main_layout.addWidget(menu_container, 1)
        main_layout.addWidget(instruction_frame)
        main_layout.addStretch()

    def create_menu_button(self, text):
        button = QPushButton(text)
        # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–µ–∑–∞–ª—Å—è
        button.setMinimumSize(420, 70)
        button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        button.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 25px;
                border-radius: 10px;
                font-size: 16px;
                font-weight: bold;
                margin: 5px 0;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        return button

    def show_manage_cars(self):
        self.parent().parent().show_manage_cars_page()
    
    def show_all_cars(self):
        self.parent().parent().show_all_cars_page()
    
    def show_realtime_stats(self):
        self.parent().parent().show_realtime_stats_page()

class CarCatalogPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)

        title = QLabel("–ö–ê–¢–ê–õ–û–ì –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet(f"""
            QScrollArea {{
                border: none;
                background-color: transparent;
            }}
            QScrollBar:vertical {{
                background-color: {COLORS['secondary_bg']};
                width: 10px;
                margin: 0px;
                border-radius: 5px;
            }}
            QScrollBar::handle:vertical {{
                background-color: {COLORS['accent_green']};
                min-height: 20px;
                border-radius: 5px;
            }}
            QScrollBar::handle:vertical:hover {{
                background-color: {COLORS['accent_teal']};
            }}
        """)

        self.cards_container = QWidget()
        self.cards_layout = QGridLayout(self.cards_container)
        self.cards_layout.setAlignment(Qt.AlignTop)
        self.cards_layout.setHorizontalSpacing(15)
        self.cards_layout.setVerticalSpacing(15)
        self.cards_layout.setContentsMargins(10, 10, 10, 10)

        scroll_area.setWidget(self.cards_container)

        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)

        layout.addWidget(title)
        layout.addWidget(scroll_area)
        layout.addWidget(btn_back)

        self.load_cars()

    def load_cars(self):
        try:
            for i in reversed(range(self.cards_layout.count())): 
                widget = self.cards_layout.itemAt(i).widget()
                if widget:
                    widget.setParent(None)
            
            cars = get_available_cars()
            
            if not cars:
                no_cars_label = QLabel("–í –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
                no_cars_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 16px; font-family: 'Segoe UI';")
                no_cars_label.setAlignment(Qt.AlignCenter)
                self.cards_layout.addWidget(no_cars_label, 0, 0, 1, 3)
                return
            
            for i, car in enumerate(cars):
                row = i // 3
                col = i % 3
                car_card = CarCard(car, self.user, self.load_cars)
                self.cards_layout.addWidget(car_card, row, col)
                
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {str(e)}")

class AllCarsPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)

        title = QLabel("–í–ï–°–¨ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢ –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)

        self.table = QTableWidget()
        self.table.setStyleSheet(f"""
            QTableWidget {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                gridline-color: {COLORS['border']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 8px;
                font-family: 'Segoe UI';
            }}
            QTableWidget::item {{
                padding: 10px;
                border-bottom: 1px solid {COLORS['border']};
                color: {COLORS['text_primary']};
            }}
            QTableWidget::item:selected {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
            QHeaderView::section {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                padding: 12px;
                font-weight: bold;
                border: none;
                font-family: 'Segoe UI';
            }}
        """)

        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)

        layout.addWidget(title)
        layout.addWidget(self.table)
        layout.addWidget(btn_back)

        self.load_cars()

    def load_cars(self):
        try:
            cars = get_all_cars()
            
            self.table.setRowCount(len(cars))
            self.table.setColumnCount(7)
            self.table.setHorizontalHeaderLabels(["ID", "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–¶–≤–µ—Ç", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å"])
            
            for row, car in enumerate(cars):
                self.table.setItem(row, 0, QTableWidgetItem(str(car['id'])))
                self.table.setItem(row, 1, QTableWidgetItem(car['brand']))
                self.table.setItem(row, 2, QTableWidgetItem(car['model']))
                self.table.setItem(row, 3, QTableWidgetItem(str(car['year'])))
                self.table.setItem(row, 4, QTableWidgetItem(car['color']))
                self.table.setItem(row, 5, QTableWidgetItem(f"{car['price']:,.0f} ‚ÇΩ"))
                
                status_item = QTableWidgetItem(car['status'])
                if car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏':
                    status_item.setForeground(QColor(COLORS['success']))
                else:
                    status_item.setForeground(QColor(COLORS['danger']))
                self.table.setItem(row, 6, status_item)
            
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {str(e)}")

class ManageCarsPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.load_cars()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        
        title = QLabel("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        form_container = QWidget()
        form_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
        """)
        form_layout = QFormLayout(form_container)
        form_layout.setSpacing(15)
        
        self.brand_edit = QLineEdit()
        self.brand_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota")
        self.model_edit = QLineEdit()
        self.model_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: Camry")
        self.year_spin = QSpinBox()
        self.year_spin.setRange(2000, 2030)
        self.year_spin.setValue(2024)
        self.vin_edit = QLineEdit()
        self.vin_edit.setPlaceholderText("17-–∑–Ω–∞—á–Ω—ã–π VIN")
        self.color_edit = QLineEdit()
        self.color_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ß–µ—Ä–Ω—ã–π")
        self.price_spin = QSpinBox()
        self.price_spin.setRange(0, 100000000)
        self.price_spin.setValue(1000000)
        self.price_spin.setSuffix(" ‚ÇΩ")
        self.mileage_spin = QSpinBox()
        self.mileage_spin.setRange(0, 1000000)
        self.mileage_spin.setValue(0)
        self.mileage_spin.setSuffix(" –∫–º")
        
        input_style = f"""
            QLineEdit, QSpinBox {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                padding: 10px;
                border: 1px solid {COLORS['border']};
                border-radius: 6px;
                font-size: 14px;
                font-family: 'Segoe UI';
            }}
            QLineEdit:focus, QSpinBox:focus {{
                border-color: {COLORS['accent_green']};
                background-color: {COLORS['secondary_bg']};
            }}
            QSpinBox::up-button, QSpinBox::down-button {{
                background-color: {COLORS['accent_green']};
                border: none;
                border-radius: 3px;
            }}
        """
        
        for edit in [self.brand_edit, self.model_edit, self.vin_edit, self.color_edit]:
            edit.setStyleSheet(input_style)
        self.year_spin.setStyleSheet(input_style)
        self.price_spin.setStyleSheet(input_style)
        self.mileage_spin.setStyleSheet(input_style)
        
        form_layout.addRow("–ú–∞—Ä–∫–∞:", self.brand_edit)
        form_layout.addRow("–ú–æ–¥–µ–ª—å:", self.model_edit)
        form_layout.addRow("–ì–æ–¥:", self.year_spin)
        form_layout.addRow("VIN:", self.vin_edit)
        form_layout.addRow("–¶–≤–µ—Ç:", self.color_edit)
        form_layout.addRow("–¶–µ–Ω–∞:", self.price_spin)
        form_layout.addRow("–ü—Ä–æ–±–µ–≥:", self.mileage_spin)
        
        for i in range(form_layout.rowCount()):
            label = form_layout.itemAt(i, QFormLayout.LabelRole).widget()
            if label:
                label.setStyleSheet(f"color: {COLORS['accent_green']}; font-size: 14px; font-family: 'Segoe UI'; font-weight: bold;")
        
        btn_add = QPushButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –ê–í–¢–û–ú–û–ë–ò–õ–¨")
        btn_add.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 15px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_add.clicked.connect(self.add_car)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        self.table = QTableWidget()
        self.table.setStyleSheet(f"""
            QTableWidget {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                gridline-color: {COLORS['border']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 8px;
                font-family: 'Segoe UI';
            }}
            QTableWidget::item {{
                padding: 10px;
                border-bottom: 1px solid {COLORS['border']};
                color: {COLORS['text_primary']};
            }}
            QTableWidget::item:selected {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
            QHeaderView::section {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                padding: 12px;
                font-weight: bold;
                border: none;
                font-family: 'Segoe UI';
            }}
        """)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        btn_edit = QPushButton("‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨")
        btn_edit.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_edit.clicked.connect(self.edit_car)
        
        btn_delete = QPushButton("üóëÔ∏è –£–î–ê–õ–ò–¢–¨")
        btn_delete.setStyleSheet(f"""
            QPushButton {{
                background-color: {COLORS['danger']};
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: #dc2626;
            }}
        """)
        btn_delete.clicked.connect(self.delete_car)
        
        btn_refresh = QPushButton("üîÑ –û–ë–ù–û–í–ò–¢–¨")
        btn_refresh.setStyleSheet(f"""
            QPushButton {{
                background-color: {COLORS['accent_teal']};
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: #0f766e;
            }}
        """)
        btn_refresh.clicked.connect(self.load_cars)
        
        buttons_layout.addWidget(btn_edit)
        buttons_layout.addWidget(btn_delete)
        buttons_layout.addWidget(btn_refresh)
        buttons_layout.addStretch()
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)
        
        layout.addWidget(title)
        layout.addWidget(form_container)
        layout.addWidget(btn_add)
        layout.addWidget(self.table)
        layout.addLayout(buttons_layout)
        layout.addWidget(btn_back)
        
    def add_car(self):
        try:
            brand = self.brand_edit.text().strip()
            model = self.model_edit.text().strip()
            year = self.year_spin.value()
            vin = self.vin_edit.text().strip()
            color = self.color_edit.text().strip()
            price = self.price_spin.value()
            mileage = self.mileage_spin.value()
            
            if not brand or not model or not vin or not color:
                QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                return
                
            if len(vin) != 17:
                QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ images –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            images_path = os.path.join(os.path.dirname(__file__), "images")
            if not os.path.exists(images_path):
                # –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç
                QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É 'images'.")
                return

            # –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (brand_model –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
            normalized_brand = brand.strip().lower().replace(" ", "_")
            normalized_model = model.strip().lower().replace(" ", "_")
            possible_filenames = [
                f"{normalized_brand}_{normalized_model}.jpg",
                f"{normalized_brand}_{normalized_model}.png",
                f"{normalized_brand}_{normalized_model}.jpeg",
                f"{normalized_brand}-{normalized_model}.jpg",
                f"{normalized_brand}-{normalized_model}.png",
                f"{normalized_brand}{normalized_model}.jpg",
                f"{normalized_brand}{normalized_model}.png"
            ]
            image_found = False
            for fn in possible_filenames:
                if os.path.exists(os.path.join(images_path, fn)):
                    image_found = True
                    break

            if not image_found:
                QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", 
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {brand} {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ 'images'.\n"
                    f"–ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —Å–∏—Å—Ç–µ–º–æ–π: {', '.join(possible_filenames[:3])}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
                return
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            add_car(brand, model, year, vin, color, price, mileage)
            QMessageBox.information(self, "‚úÖ –£–°–ü–ï–•", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.brand_edit.clear()
            self.model_edit.clear()
            self.vin_edit.clear()
            self.color_edit.clear()
            self.price_spin.setValue(1000000)
            self.mileage_spin.setValue(0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É (real-time –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫)
            self.load_cars()
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {str(e)}")

    def edit_car(self):
        selected_row = self.table.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        car_id = int(self.table.item(selected_row, 0).text())
        car = get_car_by_id(car_id)
        if not car:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
            return
        # –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª)...
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        dialog.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        dialog.setFixedSize(400, 500)
        layout = QVBoxLayout(dialog)
        title = QLabel("–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø")
        title.setStyleSheet(f"""
            font-size: 20px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        form_layout = QFormLayout()
        form_layout.setSpacing(15)
        brand_edit = QLineEdit(car['brand'])
        model_edit = QLineEdit(car['model'])
        year_spin = QSpinBox()
        year_spin.setRange(2000, 2030)
        year_spin.setValue(car['year'])
        vin_edit = QLineEdit(car['vin'])
        color_edit = QLineEdit(car['color'])
        price_spin = QSpinBox()
        price_spin.setRange(0, 100000000)
        price_spin.setValue(int(car['price']))
        price_spin.setSuffix(" ‚ÇΩ")
        mileage_spin = QSpinBox()
        mileage_spin.setRange(0, 1000000)
        mileage_spin.setValue(car['mileage'])
        mileage_spin.setSuffix(" –∫–º")
        input_style = f"""
            QLineEdit, QSpinBox {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                padding: 10px;
                border: 1px solid {COLORS['border']};
                border-radius: 6px;
                font-size: 14px;
                font-family: 'Segoe UI';
            }}
        """
        for edit in [brand_edit, model_edit, vin_edit, color_edit]:
            edit.setStyleSheet(input_style)
        year_spin.setStyleSheet(input_style)
        price_spin.setStyleSheet(input_style)
        mileage_spin.setStyleSheet(input_style)
        form_layout.addRow("–ú–∞—Ä–∫–∞:", brand_edit)
        form_layout.addRow("–ú–æ–¥–µ–ª—å:", model_edit)
        form_layout.addRow("–ì–æ–¥:", year_spin)
        form_layout.addRow("VIN:", vin_edit)
        form_layout.addRow("–¶–≤–µ—Ç:", color_edit)
        form_layout.addRow("–¶–µ–Ω–∞:", price_spin)
        form_layout.addRow("–ü—Ä–æ–±–µ–≥:", mileage_spin)
        for i in range(form_layout.rowCount()):
            label = form_layout.itemAt(i, QFormLayout.LabelRole).widget()
            if label:
                label.setStyleSheet(f"color: {COLORS['accent_green']}; font-size: 14px; font-family: 'Segoe UI'; font-weight: bold;")
        btn_save = QPushButton("üíæ –°–û–•–†–ê–ù–ò–¢–¨")
        btn_save.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 15px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_cancel = QPushButton("‚ùå –û–¢–ú–ï–ù–ê")
        btn_cancel.setStyleSheet(f"""
            QPushButton {{
                background-color: {COLORS['danger']};
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: #dc2626;
            }}
        """)
        def save_changes():
            try:
                # –µ—Å–ª–∏ –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–º–µ–Ω—è–ª–∏—Å—å, —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–æ –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ)
                update_car(
                    car_id,
                    brand_edit.text().strip(),
                    model_edit.text().strip(),
                    year_spin.value(),
                    vin_edit.text().strip(),
                    color_edit.text().strip(),
                    price_spin.value(),
                    mileage_spin.value()
                )
                QMessageBox.information(dialog, "‚úÖ –£–°–ü–ï–•", "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                dialog.accept()
                self.load_cars()
            except Exception as e:
                QMessageBox.critical(dialog, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")
        btn_save.clicked.connect(save_changes)
        btn_cancel.clicked.connect(dialog.reject)
        layout.addWidget(title)
        layout.addLayout(form_layout)
        layout.addWidget(btn_save)
        layout.addWidget(btn_cancel)
        if dialog.exec() == QDialog.Accepted:
            self.load_cars()

    def delete_car(self):
        selected_row = self.table.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        car_id = int(self.table.item(selected_row, 0).text())
        brand = self.table.item(selected_row, 1).text()
        model = self.table.item(selected_row, 2).text()
        reply = QMessageBox.question(
            self, 
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å {brand} {model}?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            try:
                delete_car(car_id)
                QMessageBox.information(self, "‚úÖ –£–°–ü–ï–•", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                self.load_cars()
            except Exception as e:
                QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {str(e)}")

    def load_cars(self):
        try:
            cars = get_all_cars()
            self.table.setRowCount(len(cars))
            self.table.setColumnCount(8)
            self.table.setHorizontalHeaderLabels(["ID", "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "VIN", "–¶–≤–µ—Ç", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å"])
            for row, car in enumerate(cars):
                self.table.setItem(row, 0, QTableWidgetItem(str(car['id'])))
                self.table.setItem(row, 1, QTableWidgetItem(car['brand']))
                self.table.setItem(row, 2, QTableWidgetItem(car['model']))
                self.table.setItem(row, 3, QTableWidgetItem(str(car['year'])))
                self.table.setItem(row, 4, QTableWidgetItem(car['vin']))
                self.table.setItem(row, 5, QTableWidgetItem(car['color']))
                self.table.setItem(row, 6, QTableWidgetItem(f"{car['price']:,.0f} ‚ÇΩ"))
                status_item = QTableWidgetItem(car['status'])
                if car['status'] == '–≤ –Ω–∞–ª–∏—á–∏–∏':
                    status_item.setForeground(QColor(COLORS['success']))
                else:
                    status_item.setForeground(QColor(COLORS['danger']))
                self.table.setItem(row, 7, status_item)
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {str(e)}")

class RealtimeStatsPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def get_realtime_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            conn = get_conn()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM CARS")
            total_cars = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM CARS WHERE status = '–≤ –Ω–∞–ª–∏—á–∏–∏'")
            available_cars = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM CARS WHERE status = '–ø—Ä–æ–¥–∞–Ω'")
            sold_cars = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM ORDERS")
            total_orders = cursor.fetchone()[0]
            cursor.execute("SELECT SUM(final_price) FROM ORDERS")
            total_revenue = cursor.fetchone()[0] or 0
            cursor.execute("SELECT COUNT(*) FROM CLIENTS")
            total_clients = cursor.fetchone()[0]
            conn.close()
            stats = [
                ("–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", total_cars, COLORS['accent_green']),
                ("–í –Ω–∞–ª–∏—á–∏–∏", available_cars, COLORS['success']),
                ("–ü—Ä–æ–¥–∞–Ω–æ", sold_cars, COLORS['accent_teal']),
                ("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", total_orders, COLORS['accent_green']),
                ("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚ÇΩ", COLORS['success']),
                ("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total_clients, COLORS['accent_teal'])
            ]
            return stats
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        
        title = QLabel("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        
        try:
            stats_container = QWidget()
            stats_container.setStyleSheet(f"""
                background-color: {COLORS['secondary_bg']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                padding: 25px;
            """)
            stats_layout = QGridLayout(stats_container)
            stats_layout.setSpacing(15)
            stats = self.get_realtime_stats()
            stats_widgets = []
            for i, (label, value, color) in enumerate(stats):
                stat_widget = QWidget()
                stat_widget.setStyleSheet(f"""
                    background-color: {COLORS['primary_bg']};
                    border: 2px solid {color};
                    border-radius: 8px;
                    padding: 15px;
                """)
                stat_layout = QVBoxLayout(stat_widget)
                value_label = QLabel(str(value))
                value_label.setStyleSheet(f"""
                    color: {color};
                    font-size: 24px;
                    font-weight: bold;
                    font-family: 'Segoe UI';
                """)
                value_label.setAlignment(Qt.AlignCenter)
                name_label = QLabel(label)
                name_label.setStyleSheet(f"""
                    color: {COLORS['text_secondary']};
                    font-size: 14px;
                    font-family: 'Segoe UI';
                """)
                name_label.setAlignment(Qt.AlignCenter)
                stat_layout.addWidget(value_label)
                stat_layout.addWidget(name_label)
                stats_widgets.append(stat_widget)
            for i, widget in enumerate(stats_widgets):
                row = i // 3
                col = i % 3
                stats_layout.addWidget(widget, row, col)
            layout.addWidget(title)
            layout.addWidget(stats_container)
        except Exception as e:
            error_label = QLabel(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:\n{str(e)}")
            error_label.setStyleSheet(f"color: {COLORS['danger']}; font-size: 16px; font-family: 'Segoe UI';")
            error_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(title)
            layout.addWidget(error_label)
        
        btn_refresh = QPushButton("üîÑ –û–ë–ù–û–í–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£")
        btn_refresh.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin: 15px 0;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_refresh.clicked.connect(self.refresh_stats)
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 10px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)
        
        layout.addWidget(btn_refresh)
        layout.addWidget(btn_back)
        layout.addStretch()

    def refresh_stats(self):
        self.parent().parent().show_realtime_stats_page()

class OrdersPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        
        title = QLabel("–ú–û–ò –ó–ê–ö–ê–ó–´")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet(f"""
            QScrollArea {{
                border: none;
                background-color: transparent;
            }}
            QScrollBar:vertical {{
                background-color: {COLORS['secondary_bg']};
                width: 10px;
                margin: 0px;
                border-radius: 5px;
            }}
            QScrollBar::handle:vertical {{
                background-color: {COLORS['accent_green']};
                min-height: 20px;
                border-radius: 5px;
            }}
        """)
        
        self.orders_container = QWidget()
        self.orders_layout = QGridLayout(self.orders_container)
        self.orders_layout.setAlignment(Qt.AlignTop)
        self.orders_layout.setHorizontalSpacing(15)
        self.orders_layout.setVerticalSpacing(15)
        self.orders_layout.setContentsMargins(10, 10, 10, 10)
        scroll_area.setWidget(self.orders_container)
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)
        
        layout.addWidget(title)
        layout.addWidget(scroll_area)
        layout.addWidget(btn_back)
        
        self.load_orders()

    def load_orders(self):
        try:
            for i in reversed(range(self.orders_layout.count())): 
                widget = self.orders_layout.itemAt(i).widget()
                if widget:
                    widget.setParent(None)
            
            client_id = get_or_create_client_for_user(self.user['id'], self.user['username'])
            orders = get_client_orders(client_id)
            
            if not orders:
                no_orders_label = QLabel("–£ –í–ê–° –ü–û–ö–ê –ù–ï–¢ –ó–ê–ö–ê–ó–û–í")
                no_orders_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 16px; font-family: 'Segoe UI';")
                no_orders_label.setAlignment(Qt.AlignCenter)
                self.orders_layout.addWidget(no_orders_label, 0, 0, 1, 3)
                return
            
            for i, order in enumerate(orders):
                row = i // 3
                col = i % 3
                order_card = OrderCard(order)
                self.orders_layout.addWidget(order_card, row, col)
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã: {str(e)}")

class ReviewsPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        
        title = QLabel("–û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        
        form_container = QWidget()
        form_container.setStyleSheet(f"""
            background-color: {COLORS['secondary_bg']};
            border: 2px solid {COLORS['accent_green']};
            border-radius: 12px;
            padding: 25px;
        """)
        form_layout = QFormLayout(form_container)
        form_layout.setSpacing(15)
        
        self.order_id_edit = QLineEdit()
        self.order_id_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞")
        self.rating_spin = QSpinBox()
        self.rating_spin.setRange(1, 5)
        self.rating_spin.setValue(5)
        self.comment_edit = QTextEdit()
        self.comment_edit.setPlaceholderText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤...")
        self.comment_edit.setMaximumHeight(100)
        
        input_style = f"""
            QLineEdit, QSpinBox, QTextEdit {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                padding: 10px;
                border: 1px solid {COLORS['border']};
                border-radius: 6px;
                font-size: 14px;
                font-family: 'Segoe UI';
            }}
            QLineEdit:focus, QSpinBox:focus, QTextEdit:focus {{
                border-color: {COLORS['accent_green']};
                background-color: {COLORS['secondary_bg']};
            }}
            QSpinBox::up-button, QSpinBox::down-button {{
                background-color: {COLORS['accent_green']};
                border: none;
                border-radius: 3px;
            }}
        """
        
        self.order_id_edit.setStyleSheet(input_style)
        self.rating_spin.setStyleSheet(input_style)
        self.comment_edit.setStyleSheet(input_style)
        
        form_layout.addRow("ID –∑–∞–∫–∞–∑–∞:", self.order_id_edit)
        form_layout.addRow("–û—Ü–µ–Ω–∫–∞ (1-5):", self.rating_spin)
        form_layout.addRow("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", self.comment_edit)
        
        for i in range(form_layout.rowCount()):
            label = form_layout.itemAt(i, QFormLayout.LabelRole).widget()
            if label:
                label.setStyleSheet(f"color: {COLORS['accent_green']}; font-size: 14px; font-family: 'Segoe UI'; font-weight: bold;")
        
        btn_submit = QPushButton("üìù –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–ó–´–í")
        btn_submit.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                margin-top: 15px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_submit.clicked.connect(self.submit_review)
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background-color: transparent;
                color: {COLORS['accent_green']};
                border: 2px solid {COLORS['accent_green']};
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 10px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
        """)
        btn_back.clicked.connect(self.back_callback)
        
        layout.addWidget(title)
        layout.addWidget(form_container)
        layout.addWidget(btn_submit)
        layout.addWidget(btn_back)
        layout.addStretch()

    def submit_review(self):
        try:
            order_id = int(self.order_id_edit.text())
            rating = self.rating_spin.value()
            comment = self.comment_edit.toPlainText().strip()
            
            if not order_id or not comment:
                QMessageBox.warning(self, "–í–ù–ò–ú–ê–ù–ò–ï", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                return
            
            client_id = get_or_create_client_for_user(self.user['id'], self.user['username'])
            
            add_review(client_id, order_id, rating, comment)
            QMessageBox.information(self, "‚úÖ –£–°–ü–ï–•", "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            self.order_id_edit.clear()
            self.rating_spin.setValue(5)
            self.comment_edit.clear()
            
        except ValueError:
            QMessageBox.warning(self, "‚ùå –û–®–ò–ë–ö–ê", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: {str(e)}")

class MyReviewsPage(QWidget):
    def __init__(self, user, back_callback):
        super().__init__()
        self.user = user
        self.back_callback = back_callback
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet(f"background-color: {COLORS['primary_bg']};")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        
        title = QLabel("–ú–û–ò –û–¢–ó–´–í–´")
        title.setStyleSheet(f"""
            font-size: 28px; 
            color: {COLORS['accent_green']}; 
            font-weight: bold; 
            margin-bottom: 20px;
            font-family: 'Segoe UI';
        """)
        title.setAlignment(Qt.AlignCenter)
        
        self.table = QTableWidget()
        self.table.setStyleSheet(f"""
            QTableWidget {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                gridline-color: {COLORS['border']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 8px;
                font-family: 'Segoe UI';
            }}
            QTableWidget::item {{
                padding: 10px;
                border-bottom: 1px solid {COLORS['border']};
                color: {COLORS['text_primary']};
            }}
            QTableWidget::item:selected {{
                background-color: {COLORS['accent_green']};
                color: {COLORS['text_primary']};
            }}
            QHeaderView::section {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                padding: 12px;
                font-weight: bold;
                border: none;
                font-family: 'Segoe UI';
            }}
        """)
        
        btn_back = QPushButton("‚óÄ –ù–ê–ó–ê–î –í –ú–ï–ù–Æ")
        btn_back.setStyleSheet(f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                margin-top: 20px;
                font-family: 'Segoe UI';
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        btn_back.clicked.connect(self.back_callback)
        
        layout.addWidget(title)
        layout.addWidget(self.table)
        layout.addWidget(btn_back)
        
        self.load_reviews()

    def load_reviews(self):
        try:
            client_id = get_or_create_client_for_user(self.user['id'], self.user['username'])
            reviews = get_client_reviews(client_id)
            
            self.table.setRowCount(len(reviews))
            self.table.setColumnCount(4)
            self.table.setHorizontalHeaderLabels(["–ó–∞–∫–∞–∑", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–î–∞—Ç–∞"])
            
            for row, review in enumerate(reviews):
                self.table.setItem(row, 0, QTableWidgetItem(f"–ó–∞–∫–∞–∑ #{review['order_id']}"))
                
                rating_stars = "‚òÖ" * review['rating'] + "‚òÜ" * (5 - review['rating'])
                self.table.setItem(row, 1, QTableWidgetItem(rating_stars))
                
                comment = review['comment'] if review['comment'] else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
                self.table.setItem(row, 2, QTableWidgetItem(comment))
                self.table.setItem(row, 3, QTableWidgetItem(str(review['review_date'])))
            
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.table.resizeColumnToContents(1)
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û–®–ò–ë–ö–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {str(e)}")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AUTO DREAMS - –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–ò")
        self.setMinimumSize(1200, 800)
        self.resize(1200, 800)
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {COLORS['primary_bg']};
            }}
            QMessageBox {{
                background-color: {COLORS['secondary_bg']};
                color: {COLORS['text_primary']};
                border: 2px solid {COLORS['accent_green']};
                border-radius: 12px;
                font-family: 'Segoe UI';
            }}
            QMessageBox QLabel {{
                color: {COLORS['text_primary']};
            }}
            QMessageBox QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 {COLORS['accent_green']}, stop:1 {COLORS['accent_teal']});
                color: {COLORS['text_primary']};
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Segoe UI';
            }}
            QMessageBox QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #0ea271, stop:1 #0c857a);
            }}
        """)
        
        self.stacked = QStackedWidget()
        self.setCentralWidget(self.stacked)
        
        self.login_page = LoginPage(
            on_login_success=self.handle_login_success,
            go_register=self.show_register
        )
        
        self.register_page = RegisterPage(go_login=self.show_login)
        
        self.stacked.addWidget(self.login_page)
        self.stacked.addWidget(self.register_page)
        
        self.show_login()
    
    def show_login(self):
        self.stacked.setCurrentWidget(self.login_page)
    
    def show_register(self):
        self.stacked.setCurrentWidget(self.register_page)
    
    def handle_login_success(self, user):
        self.user = user
        
        if user['role'] == 'employee' or user['role'] == 'admin':
            self.main_menu = EmployeeMainMenuPage(user, logout_callback=self.show_login)
        else:
            self.main_menu = ClientMainMenuPage(user, logout_callback=self.show_login)
            
        self.stacked.addWidget(self.main_menu)
        self.stacked.setCurrentWidget(self.main_menu)
    
    def show_car_catalog(self):
        self.car_catalog = CarCatalogPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.car_catalog)
        self.stacked.setCurrentWidget(self.car_catalog)
    
    def show_all_cars_page(self):
        self.all_cars = AllCarsPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.all_cars)
        self.stacked.setCurrentWidget(self.all_cars)
    
    def show_manage_cars_page(self):
        self.manage_cars = ManageCarsPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.manage_cars)
        self.stacked.setCurrentWidget(self.manage_cars)
    
    def show_realtime_stats_page(self):
        self.realtime_stats = RealtimeStatsPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.realtime_stats)
        self.stacked.setCurrentWidget(self.realtime_stats)
    
    def show_orders_page(self):
        self.orders_page = OrdersPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.orders_page)
        self.stacked.setCurrentWidget(self.orders_page)
    
    def show_reviews_page(self):
        self.reviews_page = ReviewsPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.reviews_page)
        self.stacked.setCurrentWidget(self.reviews_page)
    
    def show_my_reviews_page(self):
        self.my_reviews_page = MyReviewsPage(self.user, back_callback=self.show_main_menu)
        self.stacked.addWidget(self.my_reviews_page)
        self.stacked.setCurrentWidget(self.my_reviews_page)
    
    def show_main_menu(self):
        self.stacked.setCurrentWidget(self.main_menu)

if __name__ == "__main__":
    try:
        init_db()
        init_car_db()
        
        app = QApplication(sys.argv)
        window = MainWindow()
        window.show()
        sys.exit(app.exec())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{str(e)}")