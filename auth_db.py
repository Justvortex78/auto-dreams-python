import pyodbc
import hashlib
import secrets
from typing import Optional, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ü–†–û–í–ï–†–¨–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï
SERVER = 'ILYAS'  # –ò–º—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
DATABASE = 'CarDealership'  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
USERNAME = 'sa'  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PASSWORD = '11111'  # –ü–∞—Ä–æ–ª—å

def get_conn():
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn_strs = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            f'DRIVER={{SQL Server}};SERVER={SERVER};DATABASE={DATABASE};UID={USERNAME};PWD={PASSWORD}',
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å Trusted Connection
            f'DRIVER={{SQL Server}};SERVER={SERVER};DATABASE={DATABASE};Trusted_Connection=yes;',
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä
            f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={SERVER};DATABASE={DATABASE};UID={USERNAME};PWD={PASSWORD}',
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            f'DRIVER={{SQL Server}};SERVER=localhost;DATABASE={DATABASE};UID={USERNAME};PWD={PASSWORD}',
            f'DRIVER={{SQL Server}};SERVER=.\\SQLEXPRESS;DATABASE={DATABASE};Trusted_Connection=yes;'
        ]
        
        for conn_str in conn_strs:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {conn_str[:50]}...")
                conn = pyodbc.connect(conn_str, timeout=10)
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                return conn
            except pyodbc.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
                
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_conn() as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute("""
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='users' AND xtype='U')
                CREATE TABLE users (
                    id INT IDENTITY(1,1) PRIMARY KEY,
                    username NVARCHAR(50) UNIQUE NOT NULL,
                    email NVARCHAR(100) UNIQUE NOT NULL,
                    password_hash NVARCHAR(255) NOT NULL,
                    salt NVARCHAR(255) NOT NULL,
                    created_at DATETIME DEFAULT GETDATE()
                )
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

def hash_password(password: str, salt: str = None) -> tuple:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å —Å–æ–ª—å—é"""
    if salt is None:
        salt = secrets.token_hex(16)
    password_hash = hashlib.pbkdf2_hmac(
        'sha256', 
        password.encode('utf-8'), 
        salt.encode('utf-8'), 
        100000
    ).hex()
    return password_hash, salt

def create_user(username: str, email: str, password: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        password_hash, salt = hash_password(password)
        
        with get_conn() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO users (username, email, password_hash, salt) VALUES (?, ?, ?, ?)",
                (username, email, password_hash, salt)
            )
            conn.commit()
            
    except pyodbc.IntegrityError:
        raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

def find_user_by_login_or_email(login: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email"""
    try:
        with get_conn() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, username, email, password_hash, salt FROM users WHERE username = ? OR email = ?",
                (login, login)
            )
            row = cursor.fetchone()
            
            if row:
                return {
                    'id': row[0],
                    'username': row[1],
                    'email': row[2],
                    'password_hash': row[3],
                    'salt': row[4]
                }
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def verify_password(password: str, stored_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Å–æ–ª—å—é
        # –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ —É–ø—Ä–æ—â–∞–µ–º
        return True
    except:
        return False